package org.example;

import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import java.sql.*;
import java.util.*;
import java.util.stream.Collectors;

public class BotOk extends TelegramLongPollingBot {
    private static final String DB_URL = "jdbc:sqlite:kids_club.db";

    // –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    private enum BookingState {
        START,
        SELECT_COURSE,
        SELECT_AGE,
        SELECT_DAY,
        SELECT_TIME,
        CONFIRM
    }

    private static class UserState {
        BookingState state;
        String selectedCourse;
        String selectedAge;
        String selectedDay;
        String selectedTime;
        int scheduleId;
    }

    private final Map<Long, UserState> userStates = new HashMap<>();

    @Override
    public String getBotUsername() {
        return "clubOstrovOk_bot";
    }

    @Override
    public String getBotToken() {
        return "7828373193:AAGPrdyabuxT9mFtBIcCZxVsuLECzoIgsEs";
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            long chatId = update.getMessage().getChatId();
            String messageText = update.getMessage().getText();

            try {
                if (messageText.equals("/start")) {
                    sendStartMessage(chatId);
                } else if (messageText.equals("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")) {
                    sendSchedule(chatId);
                } else if (messageText.equals("üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è") || messageText.equals("‚Ü©Ô∏è –ù–∞–∑–∞–¥")) {
                    startBookingProcess(chatId);
                } else if (userStates.containsKey(chatId)) {
                    processBookingStep(chatId, messageText);
                } else {
                    sendMessage(chatId, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é");
                }
            } catch (Exception e) {
                sendMessage(chatId, "‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
                e.printStackTrace();
            }
        }
    }

    private void startBookingProcess(long chatId) {
        userStates.put(chatId, new UserState());
        userStates.get(chatId).state = BookingState.SELECT_COURSE;
        sendCourseSelection(chatId);
    }

    private void processBookingStep(long chatId, String messageText) throws SQLException {
        UserState userState = userStates.get(chatId);
        if (userState == null) {
            sendStartMessage(chatId);
            return;
        }

        switch (userState.state) {
            case SELECT_COURSE:
                handleCourseSelection(chatId, messageText);
                break;
            case SELECT_AGE:
                handleAgeSelection(chatId, messageText);
                break;
            case SELECT_DAY:
                handleDaySelection(chatId, messageText);
                break;
            case SELECT_TIME:
                handleTimeSelection(chatId, messageText);
                break;
            case CONFIRM:
                handleConfirmation(chatId, messageText);
                break;
            default:
                sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
        }
    }

    private void sendCourseSelection(long chatId) {
        try (Connection conn = DriverManager.getConnection(DB_URL);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT DISTINCT activity FROM schedule")) {

            List<String> courses = new ArrayList<>();
            while (rs.next()) {
                courses.add(rs.getString("activity"));
            }

            if (courses.isEmpty()) {
                sendMessage(chatId, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤");
                return;
            }

            SendMessage message = new SendMessage();
            message.setChatId(String.valueOf(chatId));
            message.setText("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:");
            message.setReplyMarkup(createKeyboard(courses, true));

            execute(message);
        } catch (SQLException | TelegramApiException e) {
            sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—É—Ä—Å–æ–≤");
            e.printStackTrace();
        }
    }

    private void handleCourseSelection(long chatId, String course) {
        UserState userState = userStates.get(chatId);
        userState.selectedCourse = course;
        userState.state = BookingState.SELECT_AGE;

        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement pstmt = conn.prepareStatement(
                     "SELECT DISTINCT age_group FROM schedule WHERE activity = ?")) {

            pstmt.setString(1, course);
            ResultSet rs = pstmt.executeQuery();

            List<String> ageGroups = new ArrayList<>();
            while (rs.next()) {
                ageGroups.add(rs.getString("age_group"));
            }

            if (ageGroups.isEmpty()) {
                sendMessage(chatId, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è —ç—Ç–æ–≥–æ –∫—É—Ä—Å–∞");
                startBookingProcess(chatId);
                return;
            }

            SendMessage message = new SendMessage();
            message.setChatId(String.valueOf(chatId));
            message.setText("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω—É—é –≥—Ä—É–ø–ø—É –¥–ª—è –∫—É—Ä—Å–∞ '" + course + "':");
            message.setReplyMarkup(createKeyboard(ageGroups, true));

            execute(message);
        } catch (SQLException | TelegramApiException e) {
            sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø");
            e.printStackTrace();
        }
    }

    private void handleAgeSelection(long chatId, String ageGroup) {
        UserState userState = userStates.get(chatId);
        userState.selectedAge = ageGroup;
        userState.state = BookingState.SELECT_DAY;

        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement pstmt = conn.prepareStatement(
                     "SELECT DISTINCT day FROM schedule WHERE activity = ? AND age_group = ?")) {

            pstmt.setString(1, userState.selectedCourse);
            pstmt.setString(2, ageGroup);
            ResultSet rs = pstmt.executeQuery();

            List<String> days = new ArrayList<>();
            while (rs.next()) {
                days.add(rs.getString("day"));
            }

            if (days.isEmpty()) {
                sendMessage(chatId, "‚ùå –î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –∏ –≤–æ–∑—Ä–∞—Å—Ç–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–Ω–µ–π");
                startBookingProcess(chatId);
            } else {
                SendMessage message = new SendMessage();
                message.setChatId(String.valueOf(chatId));
                message.setText("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –∫—É—Ä—Å–∞ '" + userState.selectedCourse +
                        "' (" + ageGroup + "):");
                message.setReplyMarkup(createKeyboard(days, true));
                execute(message);
            }
        } catch (SQLException | TelegramApiException e) {
            sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–Ω–µ–π");
            e.printStackTrace();
        }
    }

    private void handleDaySelection(long chatId, String day) {
        UserState userState = userStates.get(chatId);
        userState.selectedDay = day;
        userState.state = BookingState.SELECT_TIME;

        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement pstmt = conn.prepareStatement(
                     "SELECT id, time FROM schedule WHERE activity = ? AND age_group = ? AND day = ? " +
                             "AND booked_places < max_places")) {

            pstmt.setString(1, userState.selectedCourse);
            pstmt.setString(2, userState.selectedAge);
            pstmt.setString(3, day);
            ResultSet rs = pstmt.executeQuery();

            List<String> times = new ArrayList<>();
            while (rs.next()) {
                times.add(rs.getString("time"));
            }

            if (times.isEmpty()) {
                sendMessage(chatId, "‚ùå –ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç");
                userState.state = BookingState.SELECT_DAY;
                handleAgeSelection(chatId, userState.selectedAge);
            } else {
                SendMessage message = new SendMessage();
                message.setChatId(String.valueOf(chatId));
                message.setText("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –∫—É—Ä—Å–∞ '" + userState.selectedCourse +
                        "' (" + userState.selectedAge + ") –≤ " + day + ":");
                message.setReplyMarkup(createKeyboard(times, true));
                execute(message);
            }
        } catch (SQLException | TelegramApiException e) {
            sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—Ä–µ–º–µ–Ω–∏");
            e.printStackTrace();
        }
    }

    private void handleTimeSelection(long chatId, String time) {
        UserState userState = userStates.get(chatId);
        userState.selectedTime = time;
        userState.state = BookingState.CONFIRM;

        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement pstmt = conn.prepareStatement(
                     "SELECT id FROM schedule WHERE activity = ? AND age_group = ? AND day = ? AND time = ?")) {

            pstmt.setString(1, userState.selectedCourse);
            pstmt.setString(2, userState.selectedAge);
            pstmt.setString(3, userState.selectedDay);
            pstmt.setString(4, time);
            ResultSet rs = pstmt.executeQuery();

            if (rs.next()) {
                userState.scheduleId = rs.getInt("id");

                List<String> options = Arrays.asList("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "‚Ü©Ô∏è –ù–∞–∑–∞–¥");
                SendMessage message = new SendMessage();
                message.setChatId(String.valueOf(chatId));
                message.setText("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å:\n\n" +
                        "–ö—É—Ä—Å: " + userState.selectedCourse + "\n" +
                        "–í–æ–∑—Ä–∞—Å—Ç: " + userState.selectedAge + "\n" +
                        "–î–µ–Ω—å: " + userState.selectedDay + "\n" +
                        "–í—Ä–µ–º—è: " + time);
                message.setReplyMarkup(createKeyboard(options, false));
                execute(message);
            }
        } catch (SQLException | TelegramApiException e) {
            sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏");
            e.printStackTrace();
        }
    }

    private void handleConfirmation(long chatId, String confirmation) {
        UserState userState = userStates.get(chatId);

        if (confirmation.equals("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")) {
            try (Connection conn = DriverManager.getConnection(DB_URL);
                 PreparedStatement pstmt = conn.prepareStatement(
                         "UPDATE schedule SET booked_places = booked_places + 1 WHERE id = ? AND booked_places < max_places")) {

                pstmt.setInt(1, userState.scheduleId);
                int updated = pstmt.executeUpdate();

                if (updated > 0) {
                    try (PreparedStatement insertStmt = conn.prepareStatement(
                            "INSERT INTO bookings (user_id, child_name, schedule_id) VALUES (?, ?, ?)")) {

                        insertStmt.setLong(1, chatId);
                        insertStmt.setString(2, "–†–µ–±–µ–Ω–æ–∫");
                        insertStmt.setInt(3, userState.scheduleId);
                        insertStmt.executeUpdate();
                    }

                    sendMessage(chatId, "‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!");
                    sendStartMessage(chatId);
                } else {
                    sendMessage(chatId, "‚ùå –ú–µ—Å—Ç–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.");
                    userState.state = BookingState.SELECT_DAY;
                    handleAgeSelection(chatId, userState.selectedAge);
                }
            } catch (SQLException e) {
                sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏");
                e.printStackTrace();
            }
        } else {
            userState.state = BookingState.SELECT_DAY;
            handleAgeSelection(chatId, userState.selectedAge);
        }

        userStates.remove(chatId);
    }

    private ReplyKeyboardMarkup createKeyboard(List<String> options, boolean withBack) {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        List<KeyboardRow> rows = new ArrayList<>();

        if (options != null && !options.isEmpty()) {
            // –†–∞–∑–±–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞ —Ä—è–¥—ã –ø–æ 2 –∫–Ω–æ–ø–∫–∏
            for (int i = 0; i < options.size(); i += 2) {
                KeyboardRow row = new KeyboardRow();
                row.add(new KeyboardButton(options.get(i)));
                if (i + 1 < options.size()) {
                    row.add(new KeyboardButton(options.get(i + 1)));
                }
                rows.add(row);
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (withBack) {
            KeyboardRow backRow = new KeyboardRow();
            backRow.add(new KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"));
            rows.add(backRow);
        }

        keyboard.setKeyboard(rows);
        keyboard.setResizeKeyboard(true);
        return keyboard;
    }

    private void sendSchedule(long chatId) {
        try (Connection conn = DriverManager.getConnection(DB_URL);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("""
                SELECT day, time, activity, age_group, 
                       (max_places - booked_places) as free_places 
                FROM schedule 
                ORDER BY 
                    CASE day
                        WHEN '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫' THEN 1
                        WHEN '–í—Ç–æ—Ä–Ω–∏–∫' THEN 2
                        WHEN '–°—Ä–µ–¥–∞' THEN 3
                        WHEN '–ß–µ—Ç–≤–µ—Ä–≥' THEN 4
                        WHEN '–ü—è—Ç–Ω–∏—Ü–∞' THEN 5
                        WHEN '–°—É–±–±–æ—Ç–∞' THEN 6
                        ELSE 7
                    END, time""")) {

            StringBuilder schedule = new StringBuilder("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π:\n\n");
            String currentDay = "";

            while (rs.next()) {
                String day = rs.getString("day");
                if (!day.equals(currentDay)) {
                    schedule.append("\nüìå ").append(day.toUpperCase()).append("\n");
                    currentDay = day;
                }
                schedule.append(String.format(
                        "üïì %s - %s\n   üë∂ %s\n   üÜì –°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç: %d\n\n",
                        rs.getString("time"),
                        rs.getString("activity"),
                        rs.getString("age_group"),
                        rs.getInt("free_places")
                ));
            }

            sendMessage(chatId, schedule.toString());

        } catch (SQLException e) {
            sendMessage(chatId, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è");
            e.printStackTrace();
        }
    }

    private void sendStartMessage(long chatId) {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        List<KeyboardRow> rows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add(new KeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"));
        row1.add(new KeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è"));

        rows.add(row1);
        keyboard.setKeyboard(rows);
        keyboard.setResizeKeyboard(true);

        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¥–µ—Ç—Å–∫–∏–π –∫–ª—É–± '–û—Å—Ç—Ä–æ–≤–û–ö'!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");
        message.setReplyMarkup(keyboard);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void sendMessage(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
}